{"ast":null,"code":"var _jsxFileName = \"/Users/uthaya/ourjourneys/src/components/ProjectList/ProjectList.js\";\nimport React, { Component, useState } from \"react\";\nimport { TweenLite, gsap } from \"gsap\";\nimport { Draggable } from \"gsap/Draggable\";\nimport Isotope from 'isotope-layout';\nimport image1 from \"./image-1.jpg\";\nimport image2 from \"./image-2.jpg\";\nimport image3 from \"./image-3.jpg\";\nimport image4 from \"./image-4.jpg\";\nimport \"./ProjectList.scss\";\ngsap.registerPlugin(Draggable);\nconst containerId = \"imageContainer\";\nconst containerSelector = \"#\" + containerId;\nconst rowClass = \"row\";\nconst rowSelector = \".\" + rowClass;\nconst imageClass = \"sliderImage\";\nconst imageSelector = \".\" + imageClass;\nconst imgURLArray = [image1, image2, image3, image4];\nconst imgURLArrayLength = imgURLArray ? imgURLArray.length : -1;\nconst rowNum = 4;\nconst imgNum = 6;\nconst useInertia = true;\nconst useCenterGrid = true;\nlet rows, imgMidIndex, rowMidIndex;\nconst rowArray = [];\nconst imgRep = [];\nlet boxWidth, boxHeight, gutter, horizSpacing, vertSpacing, horizOffset, vertOffset, winMidX, winMidY, lastCenteredElem;\n\nclass projectList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFilterChange = newFilter => {\n      if (this.iso === undefined) {\n        this.iso = new Isotope('.filter-container', {\n          itemSelector: '.filter-item',\n          layoutMode: \"fitRows\"\n        });\n      }\n\n      if (newFilter === '*') {\n        this.iso.arrange({\n          filter: `*`\n        });\n      } else {\n        this.iso.arrange({\n          filter: `.${newFilter}`\n        });\n      }\n    };\n\n    this.centerGrid = () => {\n      let bcr = lastCenteredElem.getBoundingClientRect();\n      let midX = bcr.x + bcr.width / 2;\n      let midY = bcr.y + bcr.height / 2;\n      let x = winMidX - midX;\n      let y = winMidY - midY;\n      gsap.to(containerSelector, {\n        ease: \"sine.inOut\",\n        duration: 0.7,\n        x: \"+=\" + x,\n        y: \"+=\" + y\n      });\n    };\n\n    this.updateCenterElem = () => {\n      let elems = document.elementsFromPoint(winMidX, winMidY);\n      elems.forEach(elem => {\n        if (elem.matches(imageSelector) && !lastCenteredElem.isSameNode(elem)) {\n          lastCenteredElem = elem;\n          this.checkPositions(lastCenteredElem);\n        }\n      });\n    };\n\n    this.mouseMove = e => {\n      TweenLite.to(this.myRef.current, 0.5, {\n        css: {\n          left: e.pageX,\n          top: e.pageY\n        },\n        delay: 0.03\n      });\n    };\n\n    this.handleMouseEnter = () => {\n      TweenLite.to(this.myRef.current, 0, {\n        css: {\n          opacity: \"1\"\n        }\n      });\n    };\n\n    this.handleMouseLeave = () => {\n      TweenLite.to(this.myRef.current, 0, {\n        css: {\n          opacity: \"0\"\n        }\n      });\n    };\n\n    this.onHover = e => {\n      if (e.target.className === \"lib__item\") {\n        TweenLite.to(this.myRef.current, 0, {\n          css: {\n            \"background-image\": \"url(\" + image1 + \")\"\n          }\n        });\n      }\n\n      if (e.target.className === \"project p-2\") {\n        TweenLite.to(this.myRef.current, 0, {\n          css: {\n            \"background-image\": \"url(\" + image2 + \")\"\n          }\n        });\n      }\n\n      if (e.target.className === \"project p-3\") {\n        TweenLite.to(this.myRef.current, 0, {\n          css: {\n            \"background-image\": \"url(\" + image3 + \")\"\n          }\n        });\n      }\n\n      if (e.target.className === \"project p-4\") {\n        TweenLite.to(this.myRef.current, 0, {\n          css: {\n            \"background-image\": \"url(\" + image4 + \")\"\n          }\n        });\n      }\n    };\n\n    this.myRef = React.createRef();\n    this.onFilterChange = this.onFilterChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init() {\n    gsap.set(containerSelector, {\n      willChange: \"transform\"\n    });\n    this.createImageGrid();\n    this.createMask();\n    lastCenteredElem = document.querySelectorAll(imageSelector)[(rowMidIndex - 1) * imgNum + imgMidIndex];\n    this.createDraggable();\n    this.setStyles();\n    this.resize();\n    window.addEventListener(\"resize\", this.resize);\n  }\n\n  moveArrayIndex(array, oldIndex, newIndex) {\n    if (newIndex >= array.length) {\n      newIndex = array.length - 1;\n    }\n\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n    return array;\n  }\n\n  checkPositions(elem) {\n    // Find the location in our array of the element\n    let rowIndex = -1,\n        imgIndex = -1;\n    imgRep.forEach((row, i) => {\n      row.forEach((img, j) => {\n        if (elem.isSameNode(img)) {\n          rowIndex = i;\n          imgIndex = j;\n        }\n      });\n    }); // Element not found, return\n\n    if (rowIndex === -1) return; // Reposition elements as necessary so that our element is in the center\n    // Reposition the rows as necessary\n\n    if (rowIndex < rowMidIndex) {\n      for (let i = rowIndex; i < rowMidIndex; i++) {\n        // Update the row's actual position\n        let rowY = gsap.getProperty(rowArray[0], \"y\");\n\n        if (rowArray.length % 2 === 1) {\n          // Odd number of rows means we have to handle offset\n          let row = rowArray[rowArray.length - 1];\n\n          if (row.dataset.offset === \"true\") {\n            gsap.set(row, {\n              y: rowY - gutter - boxHeight,\n              x: \"+=\" + boxWidth / 2\n            });\n            row.dataset.offset = \"false\";\n          } else {\n            gsap.set(row, {\n              y: rowY - gutter - boxHeight,\n              x: \"-=\" + boxWidth / 2\n            });\n            row.dataset.offset = \"true\";\n          }\n        } else {\n          // Equal number of rows; don't have to handle offset\n          gsap.set(rowArray[rowArray.length - 1], {\n            y: rowY - gutter - boxHeight\n          });\n        } // Update our representations\n\n\n        this.moveArrayIndex(imgRep, imgRep.length - 1, 0);\n        this.moveArrayIndex(rowArray, rowArray.length - 1, 0);\n      }\n    } else if (rowIndex > rowMidIndex) {\n      for (let i = rowMidIndex; i < rowIndex; i++) {\n        // Update the row's actual position\n        let rowY = gsap.getProperty(rowArray[rowArray.length - 1], \"y\");\n\n        if (rowArray.length % 2 === 1) {\n          // Odd number of rows means we have to handle offset\n          let row = rowArray[0];\n\n          if (row.dataset.offset === \"true\") {\n            gsap.set(row, {\n              y: rowY + gutter + boxHeight,\n              x: \"-=\" + boxWidth / 2\n            });\n            row.dataset.offset = \"false\";\n          } else {\n            gsap.set(row, {\n              y: rowY + gutter + boxHeight,\n              x: \"+=\" + boxWidth / 2\n            });\n            row.dataset.offset = \"true\";\n          }\n        } else {\n          // Equal number of rows; don't have to handle offset\n          gsap.set(rowArray[0], {\n            y: rowY + gutter + boxHeight\n          });\n        } // Update our representations\n\n\n        this.moveArrayIndex(imgRep, 0, imgRep.length - 1);\n        this.moveArrayIndex(rowArray, 0, rowArray.length - 1);\n      }\n    } // Reposition the images as necessary\n\n\n    if (imgIndex < imgMidIndex) {\n      for (let rowNum = 0; rowNum < rows.length; rowNum++) {\n        // Do it for every row\n        let row = imgRep[rowNum];\n\n        for (let i = imgIndex; i < imgMidIndex; i++) {\n          // Update the images's actual position\n          let imgX = gsap.getProperty(row[0], \"x\");\n          gsap.set(row[row.length - 1], {\n            x: imgX - gutter - boxWidth\n          }); // Update our representation\n\n          this.moveArrayIndex(row, row.length - 1, 0);\n        }\n      }\n    } else if (imgIndex > imgMidIndex) {\n      for (let rowNum = 0; rowNum < rows.length; rowNum++) {\n        // Do it for every row\n        let row = imgRep[rowNum];\n\n        for (let i = imgMidIndex; i < imgIndex; i++) {\n          // Update the images's actual position\n          let imgX = gsap.getProperty(row[imgNum - 1], \"x\");\n          gsap.set(row[0], {\n            x: imgX + gutter + boxWidth\n          }); // Update our representation\n\n          this.moveArrayIndex(row, 0, row.length - 1);\n        }\n      }\n    }\n  }\n\n  getCenterCoords(endX, endY) {\n    return {\n      x: winMidX - endX,\n      y: winMidY - endY\n    };\n  }\n\n  createImageGrid() {\n    for (let y = 0; y < rowNum; y++) {\n      let row = document.createElement(\"div\");\n      row.className = rowClass;\n\n      for (let x = 0; x < imgNum; x++) {\n        let image = document.createElement(\"div\");\n        let link = document.createElement(\"a\");\n        let legend = document.createElement(\"div\");\n        link.className = \"filter-item styles__font-size-xs styles__font-family-sans-serif styles__double-border Thumb__wrapper Thumb__size-small Thumb__layout-horizontal\";\n        image.className = imageClass;\n        row.appendChild(link);\n        link.appendChild(image);\n        legend.className = \"Thumb__title\";\n        legend.innerHTML = \"tototo\";\n        image.appendChild(legend);\n      }\n\n      document.querySelector(containerSelector).appendChild(row); // Add the images to our representation\n\n      imgRep.push(gsap.utils.toArray(row.querySelectorAll(imageSelector)));\n    }\n\n    rows = document.querySelectorAll(rowSelector);\n    imgMidIndex = Math.floor(imgNum / 2);\n    rowMidIndex = Math.floor(rowNum / 2);\n  }\n\n  createMask() {\n    let mask = document.createElement(\"div\");\n    mask.className = \"mask\";\n    document.body.appendChild(mask);\n    gsap.set(mask, {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100vw\",\n      height: \"100vh\",\n      zIndex: 9999 // backgroundColor: \"green\",\n      // opacity: \"0.2\",\n\n    });\n  }\n\n  resize() {\n    winMidX = window.innerWidth / 2;\n    winMidY = window.innerHeight / 2;\n    boxWidth = window.innerWidth * 0.35;\n    boxHeight = window.innerHeight * 0.35;\n    gutter = window.innerWidth * 0.3;\n    horizSpacing = boxWidth + gutter * 1.5;\n    vertSpacing = boxHeight + gutter;\n    horizOffset = -(imgMidIndex * horizSpacing + boxWidth / 2) + winMidX;\n    vertOffset = -(rowMidIndex * vertSpacing + boxHeight / 2) + winMidY; // Reset our container and rows\n\n    gsap.set(containerSelector, {\n      x: 0,\n      y: 0\n    });\n    rows.forEach(function (row, i) {\n      gsap.set(row, {\n        attr: {\n          \"data-offset\": function () {\n            if (i % 2 === 0) return false;else return true;\n          }\n        },\n        x: function () {\n          if (i % 2 === 0) return horizOffset;else return horizOffset - boxWidth / 2;\n        },\n        y: function () {\n          return i * vertSpacing + vertOffset;\n        }\n      });\n      gsap.set(row.querySelectorAll(imageSelector), {\n        width: boxWidth,\n        height: boxHeight,\n        rotate: 40,\n        x: function (index) {\n          return index * horizSpacing;\n        }\n      }); // Update our representation of the rows\n\n      rowArray[i] = row;\n    });\n  }\n\n  setStyles() {\n    gsap.set(\"body\", {\n      margin: 0,\n      overflow: \"hidden\"\n    });\n    const randImgSize = Math.floor(Math.max(window.innerWidth, window.innerHeight) / 3);\n    gsap.set(imageSelector, {\n      backgroundImage: function (index) {\n        if (imgURLArray) {\n          console.log(imgURLArray[index % imgURLArrayLength]);\n          return `url(` + imgURLArray[index % imgURLArrayLength] + `)`;\n        } else return `url(https://picsum.photos/${randImgSize}/${randImgSize}?random=${index})`;\n      },\n      position: \"absolute\",\n      backgroundSize: \"cover\",\n      backgroundPosition: \"center\",\n      border: \"4px solid\",\n      top: 0,\n      left: 0\n    });\n    gsap.set(rowSelector, {\n      position: \"absolute\"\n    });\n  }\n\n  createDraggable() {\n    let options = {\n      trigger: \".mask\",\n      dragResistance: 0.4,\n      resistance: 400,\n      onDrag: this.updateCenterElem\n    };\n\n    if (useInertia) {\n      options.inertia = true;\n      options.onThrowUpdate = this.updateCenterElem;\n\n      if (useCenterGrid) {\n        options.onThrowComplete = this.centerGrid;\n      }\n    } else if (useCenterGrid) {\n      // No inertia\n      options.onDragEnd = this.centerGrid;\n    }\n\n    return Draggable.create(containerSelector, options);\n  }\n  /*moveArrayIndex(array, oldIndex, newIndex) {\n      if (newIndex >= array.length) {\n          newIndex = array.length - 1;\n      }\n      array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n      return array;\n  }\n    checkPositions(elem) {\n  // Find the location in our array of the element\n    let rowIndex = -1,\n        imgIndex = -1;\n    imgRep.forEach((row, i) => {\n      row.forEach((img, j) => {\n        if(elem.isSameNode(img)) {\n          rowIndex = i;\n          imgIndex = j;\n        }\n      });\n    });\n  \n  // Element not found, return\n    if(rowIndex === -1)\n      return;\n    \n    // Reposition elements as necessary so that our element is in the center\n    // Reposition the rows as necessary\n    if(rowIndex < rowMidIndex) {\n      for(let i = rowIndex; i < rowMidIndex; i++) {\n        // Update the row's actual position\n        let rowY = gsap.getProperty(rowArray[0], \"y\");\n        \n        if(rowArray.length % 2 === 1) { // Odd number of rows means we have to handle offset\n          let row = rowArray[rowArray.length - 1];\n          if(row.dataset.offset === \"true\") {\n            gsap.set(row, {y: rowY - gutter - boxHeight, x: \"+=\" + boxWidth / 2});\n            row.dataset.offset = \"false\";\n          } else {\n            gsap.set(row, {y: rowY - gutter - boxHeight, x: \"-=\" + boxWidth / 2});\n            row.dataset.offset = \"true\";\n          }\n        } else { // Equal number of rows; don't have to handle offset\n          gsap.set(rowArray[rowArray.length - 1], {y: rowY - gutter - boxHeight});\n        }\n        \n        // Update our representations\n        this.moveArrayIndex(imgRep, imgRep.length - 1, 0);\n        this.moveArrayIndex(rowArray, rowArray.length - 1, 0);\n      }\n    } else if(rowIndex > rowMidIndex) {\n      for(let i = rowMidIndex; i < rowIndex; i++) {\n        // Update the row's actual position\n        let rowY = gsap.getProperty(rowArray[rowArray.length - 1], \"y\");\n        \n        if(rowArray.length % 2 === 1) { // Odd number of rows means we have to handle offset\n          let row = rowArray[0];\n          if(row.dataset.offset === \"true\") {\n            gsap.set(row, {y: rowY + gutter + boxHeight, x: \"-=\" + boxWidth / 2});\n            row.dataset.offset = \"false\";\n          } else {\n            gsap.set(row, {y: rowY + gutter + boxHeight, x: \"+=\" + boxWidth / 2});\n            row.dataset.offset = \"true\";\n          }\n        } else { // Equal number of rows; don't have to handle offset\n          gsap.set(rowArray[0], {y: rowY + gutter + boxHeight});\n        }\n        \n        // Update our representations\n        this.moveArrayIndex(imgRep, 0, imgRep.length - 1);\n        this.moveArrayIndex(rowArray, 0, rowArray.length - 1);\n      }\n    }\n  \n  \n    // Reposition the images as necessary\n    if(imgIndex < imgMidIndex) {\n      for(let rowNum = 0; rowNum < rows.length; rowNum++) { // Do it for every row\n        let row = imgRep[rowNum];\n        \n        for(let i = imgIndex; i < imgMidIndex; i++) {\n          // Update the images's actual position\n          let imgX = gsap.getProperty(row[0], \"x\");\n           gsap.set(row[row.length - 1], {x: imgX - gutter - boxWidth});\n           // Update our representation\n          this.moveArrayIndex(row, row.length - 1, 0);\n        }\n      }\n    } else if(imgIndex > imgMidIndex) {\n      for(let rowNum = 0; rowNum < rows.length; rowNum++) { // Do it for every row\n        let row = imgRep[rowNum];\n        \n        for(let i = imgMidIndex; i < imgIndex; i++) {\n          // Update the images's actual position\n          let imgX = gsap.getProperty(row[imgNum - 1], \"x\");\n           gsap.set(row[0], {x: imgX + gutter + boxWidth});\n           // Update our representation\n          this.moveArrayIndex(row, 0, row.length - 1);\n        }\n      }\n    }\n  }\n    centerGrid() {\n    let bcr = lastCenteredElem.getBoundingClientRect();\n    let midX = bcr.x + bcr.width / 2;\n    let midY = bcr.y + bcr.height / 2;\n    \n    let x = winMidX - midX;\n    let y = winMidY - midY;\n    \n    gsap.to(containerSelector, {\n      ease: \"sine.inOut\",\n      duration: 0.7,\n      x: \"+=\" + x,\n      y: \"+=\" + y\n    });\n  }\n   updateCenterElem() {\n    let elems = document.elementsFromPoint(winMidX, winMidY);\n    elems.forEach(elem => {\n      if(elem.matches(imageSelector) && !lastCenteredElem.isSameNode(elem)) {\n        lastCenteredElem = elem; \n        \n        this.checkPositions(lastCenteredElem);\n      }\n    });\n  }\n   createMask() {\n    let mask = document.createElement(\"div\");\n    mask.className = \"mask\";\n    document.body.appendChild(mask);\n    \n    gsap.set(mask, {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100vw\",\n      height: \"100vh\",\n      zIndex: 9999,\n    });\n  }*/\n\n  /*resize() {\n    winMidX = innerWidth / 2;\n    winMidY = innerHeight / 2;\n    boxWidth = innerWidth * 0.35;\n    boxHeight = innerHeight * 0.35;\n    gutter = innerWidth * 0.05;\n    horizSpacing = boxWidth + gutter;\n    vertSpacing = boxHeight + gutter;\n    horizOffset = -(imgMidIndex * horizSpacing + boxWidth / 2) + winMidX;\n    vertOffset = -(rowMidIndex * vertSpacing + boxHeight / 2) + winMidY;\n    \n    // Reset our container and rows\n    gsap.set(containerSelector, {x: 0, y: 0, rotate: 30});\n    let imgNum = document.querySelectorAll(imageSelector);\n    for (var i = 0; i < imgNum.length; i++) {\n        gsap.set(imgNum[i], {\n          x: function() {\n              return 0;\n          },\n          y: function() {\n            return 0;\n          },\n        });\n    }\n     var callback = function (entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          // play the individual target.timeline\n          entry.target.timeline.play();\n        } else {\n          //entry.target.timeline.pause(0);\n        }\n      });\n    };\n     var options = {\n      threshold: 0.6, // target 'section' should be 60% visible\n      rootMargin: '0px 0px -40% 0px'\n      //rootMargin isn't active in a normal CodePen.\n      //Change View: use DebugMode\n    };\n     var observer = new IntersectionObserver(callback, options);\n    var targets = document.querySelectorAll(imageSelector);\n     // a loop: create the individual target timelines\n    targets.forEach(function(target) {\n      var ww = window.innerWidth + 300;\n      var action = gsap.timeline({paused:false})\n      .to(target, {\n        duration: 10, \n        x:ww, \n        ease: \"sine.inOut\", \n        repeat: -1\n      });\n      \n      target.timeline = action;\n    });\n     Array.prototype.forEach.call(targets, (el) => {observer.observe(el);});  \n    \n  }\n   createDraggable() {\n    let options = {\n      trigger: \".mask\",\n      dragResistance: 0.4,\n      resistance: 400,\n      rotate: 45,\n    }\n    \n    if(useInertia) {\n      options.inertia = true;\n    }\n        \n    return Draggable.create(imageSelector, options);\n  }*/\n\n\n  changeBackground(e) {\n    console.log(e.target);\n    e.target.style.background = 'red';\n  }\n\n  render() {\n    const dragInfo = {\n      position: 'absolute',\n      bottom: '20%'\n    };\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      id: \"portfolio-flters\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      \"data-filter\": \"*\",\n      onClick: () => {\n        this.onFilterChange(\"*\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, \"All\"), React.createElement(\"li\", {\n      \"data-filter\": \"filter-one\",\n      onClick: () => {\n        this.onFilterChange(\"filter-one\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, \"One\"), React.createElement(\"li\", {\n      \"data-filter\": \"filter-two\",\n      onClick: () => {\n        this.onFilterChange(\"filter-two\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, \"Two\")), React.createElement(\"div\", {\n      className: \"Container__wrapper Container__center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Intro__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"Heading__wrapper styles__font-size-xl styles__font-family-serif-bold Intro__title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }, \"Nos voyages\\uD83C\\uDFDD\"), React.createElement(\"div\", {\n      className: \"Heading__wrapper styles__font-size-sm Intro__desc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, \"Retrouvez ici toutes les villes que nous avons visit\\xE9.\"))), React.createElement(\"div\", {\n      className: \"Container__wrapper Container__absolute Container__center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"Container__wrapper Container__absolute Container__center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Heading__wrapper styles__font-size-xs\",\n      style: dragInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, \"DRAG POUR EXPLORER\"), React.createElement(\"div\", {\n      id: \"imageContainer\",\n      className: \"filter-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default projectList;","map":{"version":3,"sources":["/Users/uthaya/ourjourneys/src/components/ProjectList/ProjectList.js"],"names":["React","Component","useState","TweenLite","gsap","Draggable","Isotope","image1","image2","image3","image4","registerPlugin","containerId","containerSelector","rowClass","rowSelector","imageClass","imageSelector","imgURLArray","imgURLArrayLength","length","rowNum","imgNum","useInertia","useCenterGrid","rows","imgMidIndex","rowMidIndex","rowArray","imgRep","boxWidth","boxHeight","gutter","horizSpacing","vertSpacing","horizOffset","vertOffset","winMidX","winMidY","lastCenteredElem","projectList","constructor","props","onFilterChange","newFilter","iso","undefined","itemSelector","layoutMode","arrange","filter","centerGrid","bcr","getBoundingClientRect","midX","x","width","midY","y","height","to","ease","duration","updateCenterElem","elems","document","elementsFromPoint","forEach","elem","matches","isSameNode","checkPositions","mouseMove","e","myRef","current","css","left","pageX","top","pageY","delay","handleMouseEnter","opacity","handleMouseLeave","onHover","target","className","createRef","bind","componentDidMount","init","set","willChange","createImageGrid","createMask","querySelectorAll","createDraggable","setStyles","resize","window","addEventListener","moveArrayIndex","array","oldIndex","newIndex","splice","rowIndex","imgIndex","row","i","img","j","rowY","getProperty","dataset","offset","imgX","getCenterCoords","endX","endY","createElement","image","link","legend","appendChild","innerHTML","querySelector","push","utils","toArray","Math","floor","mask","body","position","zIndex","innerWidth","innerHeight","attr","rotate","index","margin","overflow","randImgSize","max","backgroundImage","console","log","backgroundSize","backgroundPosition","border","options","trigger","dragResistance","resistance","onDrag","inertia","onThrowUpdate","onThrowComplete","onDragEnd","create","changeBackground","style","background","render","dragInfo","bottom"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport { TweenLite, gsap } from \"gsap\";\nimport { Draggable } from \"gsap/Draggable\";\nimport Isotope from 'isotope-layout';\nimport image1 from \"./image-1.jpg\";\nimport image2 from \"./image-2.jpg\";\nimport image3 from \"./image-3.jpg\";\nimport image4 from \"./image-4.jpg\";\n\nimport \"./ProjectList.scss\";\n\ngsap.registerPlugin(Draggable);\nconst containerId = \"imageContainer\";\nconst containerSelector = \"#\" + containerId;\nconst rowClass = \"row\"\nconst rowSelector = \".\" + rowClass;\nconst imageClass = \"sliderImage\";\nconst imageSelector = \".\" + imageClass;\nconst imgURLArray = [image1, image2, image3, image4];\nconst imgURLArrayLength = imgURLArray ? imgURLArray.length : -1;\nconst rowNum = 4;\nconst imgNum = 6;\n\nconst useInertia = true;\nconst useCenterGrid = true;\n\nlet rows,\n    imgMidIndex,\n    rowMidIndex;\nconst rowArray = [];\nconst imgRep = [];\n\nlet boxWidth,\n    boxHeight,\n    gutter,\n    horizSpacing,\n    vertSpacing,\n    horizOffset,\n    vertOffset,\n    winMidX,\n    winMidY,\n    lastCenteredElem;\n\nclass projectList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.myRef = React.createRef();\n    this.onFilterChange = this.onFilterChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.init();\n  };\n\n  init() {\n    gsap.set(containerSelector, {willChange: \"transform\"});\n  \n    this.createImageGrid();\n    this.createMask();\n    lastCenteredElem = document.querySelectorAll(imageSelector)[(rowMidIndex - 1) * imgNum + imgMidIndex];\n    \n    this.createDraggable();\n    \n    this.setStyles();\n    \n    this.resize();\n    window.addEventListener(\"resize\", this.resize);\n  }\n\n  onFilterChange = (newFilter) => {\n    if (this.iso === undefined) {\n      this.iso = new Isotope('.filter-container', {\n        itemSelector: '.filter-item',\n        layoutMode: \"fitRows\"\n      });\n    }\n    if(newFilter === '*') {\n      this.iso.arrange({ filter: `*` });\n    } else {\n      this.iso.arrange({ filter: `.${newFilter}` });\n    }\n  }\n\n  moveArrayIndex(array, oldIndex, newIndex) {\n    if (newIndex >= array.length) {\n        newIndex = array.length - 1;\n    }\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n    return array;\n  }\n\n\ncheckPositions(elem) {\n  // Find the location in our array of the element\n  let rowIndex = -1,\n      imgIndex = -1;\n  imgRep.forEach((row, i) => {\n    row.forEach((img, j) => {\n      if(elem.isSameNode(img)) {\n        rowIndex = i;\n        imgIndex = j;\n      }\n    });\n  });\n  \n  // Element not found, return\n  if(rowIndex === -1)\n    return;\n  \n  // Reposition elements as necessary so that our element is in the center\n  // Reposition the rows as necessary\n  if(rowIndex < rowMidIndex) {\n    for(let i = rowIndex; i < rowMidIndex; i++) {\n      // Update the row's actual position\n      let rowY = gsap.getProperty(rowArray[0], \"y\");\n      \n      if(rowArray.length % 2 === 1) { // Odd number of rows means we have to handle offset\n        let row = rowArray[rowArray.length - 1];\n        if(row.dataset.offset === \"true\") {\n          gsap.set(row, {y: rowY - gutter - boxHeight, x: \"+=\" + boxWidth / 2});\n          row.dataset.offset = \"false\";\n        } else {\n          gsap.set(row, {y: rowY - gutter - boxHeight, x: \"-=\" + boxWidth / 2});\n          row.dataset.offset = \"true\";\n        }\n      } else { // Equal number of rows; don't have to handle offset\n        gsap.set(rowArray[rowArray.length - 1], {y: rowY - gutter - boxHeight});\n      }\n      \n      // Update our representations\n      this.moveArrayIndex(imgRep, imgRep.length - 1, 0);\n      this.moveArrayIndex(rowArray, rowArray.length - 1, 0);\n    }\n  } else if(rowIndex > rowMidIndex) {\n    for(let i = rowMidIndex; i < rowIndex; i++) {\n      // Update the row's actual position\n      let rowY = gsap.getProperty(rowArray[rowArray.length - 1], \"y\");\n      \n      if(rowArray.length % 2 === 1) { // Odd number of rows means we have to handle offset\n        let row = rowArray[0];\n        if(row.dataset.offset === \"true\") {\n          gsap.set(row, {y: rowY + gutter + boxHeight, x: \"-=\" + boxWidth / 2});\n          row.dataset.offset = \"false\";\n        } else {\n          gsap.set(row, {y: rowY + gutter + boxHeight, x: \"+=\" + boxWidth / 2});\n          row.dataset.offset = \"true\";\n        }\n      } else { // Equal number of rows; don't have to handle offset\n        gsap.set(rowArray[0], {y: rowY + gutter + boxHeight});\n      }\n      \n      // Update our representations\n      this.moveArrayIndex(imgRep, 0, imgRep.length - 1);\n      this.moveArrayIndex(rowArray, 0, rowArray.length - 1);\n    }\n  }\n  \n  \n  // Reposition the images as necessary\n  if(imgIndex < imgMidIndex) {\n    for(let rowNum = 0; rowNum < rows.length; rowNum++) { // Do it for every row\n      let row = imgRep[rowNum];\n      \n      for(let i = imgIndex; i < imgMidIndex; i++) {\n        // Update the images's actual position\n        let imgX = gsap.getProperty(row[0], \"x\");\n\n        gsap.set(row[row.length - 1], {x: imgX - gutter - boxWidth});\n\n        // Update our representation\n        this.moveArrayIndex(row, row.length - 1, 0);\n      }\n    }\n  } else if(imgIndex > imgMidIndex) {\n    for(let rowNum = 0; rowNum < rows.length; rowNum++) { // Do it for every row\n      let row = imgRep[rowNum];\n      \n      for(let i = imgMidIndex; i < imgIndex; i++) {\n        // Update the images's actual position\n        let imgX = gsap.getProperty(row[imgNum - 1], \"x\");\n\n        gsap.set(row[0], {x: imgX + gutter + boxWidth});\n\n        // Update our representation\n        this.moveArrayIndex(row, 0, row.length - 1);\n      }\n    }\n  }\n}\n\n\ncenterGrid = () => {\n  let bcr = lastCenteredElem.getBoundingClientRect();\n  let midX = bcr.x + bcr.width / 2;\n  let midY = bcr.y + bcr.height / 2;\n  \n  let x = winMidX - midX;\n  let y = winMidY - midY;\n  \n  gsap.to(containerSelector, {\n    ease: \"sine.inOut\",\n    duration: 0.7,\n    x: \"+=\" + x,\n    y: \"+=\" + y\n  });\n}\n\ngetCenterCoords(endX, endY) {\n  return {x: winMidX - endX, y: winMidY - endY}\n}\n\nupdateCenterElem = () => {\n  let elems = document.elementsFromPoint(winMidX, winMidY);\n  elems.forEach(elem => {\n    if(elem.matches(imageSelector) && !lastCenteredElem.isSameNode(elem)) {\n      lastCenteredElem = elem; \n      \n      this.checkPositions(lastCenteredElem);\n    }\n  });\n}\n\ncreateImageGrid() {\n  for(let y = 0; y < rowNum; y++) {\n    let row = document.createElement(\"div\");\n    row.className = rowClass;\n      for(let x = 0; x < imgNum; x++) {\n        let image = document.createElement(\"div\");\n        let link = document.createElement(\"a\");\n        let legend = document.createElement(\"div\");\n        link.className = \"filter-item styles__font-size-xs styles__font-family-sans-serif styles__double-border Thumb__wrapper Thumb__size-small Thumb__layout-horizontal\";\n        image.className = imageClass;\n        row.appendChild(link);\n        link.appendChild(image);\n        legend.className = \"Thumb__title\";\n        legend.innerHTML = \"tototo\";\n        image.appendChild(legend);\n      }\n    document.querySelector(containerSelector).appendChild(row);\n    \n    // Add the images to our representation\n    imgRep.push(gsap.utils.toArray(row.querySelectorAll(imageSelector)));\n  }\n  \n  rows = document.querySelectorAll(rowSelector);\n  imgMidIndex = Math.floor(imgNum / 2);\n  rowMidIndex = Math.floor(rowNum / 2);\n}\n\ncreateMask() {\n  let mask = document.createElement(\"div\");\n  mask.className = \"mask\";\n  document.body.appendChild(mask);\n  \n  gsap.set(mask, {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100vw\",\n    height: \"100vh\",\n    zIndex: 9999,\n    // backgroundColor: \"green\",\n    // opacity: \"0.2\",\n  });\n}\n\nresize() {\n  winMidX = window.innerWidth / 2;\n  winMidY = window.innerHeight / 2;\n  boxWidth = window.innerWidth * 0.35;\n  boxHeight = window.innerHeight * 0.35;\n  gutter = window.innerWidth * 0.3;\n  horizSpacing = boxWidth + gutter * 1.5;\n  vertSpacing = boxHeight + gutter;\n  horizOffset = -(imgMidIndex * horizSpacing + boxWidth / 2) + winMidX;\n  vertOffset = -(rowMidIndex * vertSpacing + boxHeight / 2) + winMidY;\n  \n  // Reset our container and rows\n  gsap.set(containerSelector, {x: 0, y: 0});\n  \n  rows.forEach(function(row, i) {\n    gsap.set(row, {\n      attr: { \n        \"data-offset\": function() {\n          if(i % 2 === 0) return false;\n          else return true;\n        }\n      },\n      x: function() {\n        if(i % 2 === 0)\n          return horizOffset;\n        else\n          return horizOffset - boxWidth / 2;\n      },\n      y: function() {\n        return i * vertSpacing + vertOffset;\n      },\n    });\n\n    gsap.set(row.querySelectorAll(imageSelector), {\n      width: boxWidth,\n      height: boxHeight,\n      rotate: 40,\n      x: function(index) {\n        return index * horizSpacing;\n      }\n    });\n    \n    // Update our representation of the rows\n    rowArray[i] = row;\n  });\n}\n\nsetStyles() {\n  gsap.set(\"body\", {\n    margin: 0,\n    overflow: \"hidden\"\n  });\n  \n  const randImgSize = Math.floor( Math.max(window.innerWidth, window.innerHeight) / 3);\n  gsap.set(imageSelector, {\n    backgroundImage: function(index) {\n      if(imgURLArray) {\n        console.log(imgURLArray[index % imgURLArrayLength]);\n        return `url(` + imgURLArray[index % imgURLArrayLength] + `)`;\n      } else \n        return `url(https://picsum.photos/${randImgSize}/${randImgSize}?random=${index})`;\n    },\n    position: \"absolute\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    border: \"4px solid\",\n    top: 0,\n    left: 0\n  });\n  \n  gsap.set(rowSelector, {\n    position: \"absolute\"\n  });\n}\n\ncreateDraggable() {\n  let options = {\n    trigger: \".mask\",\n    dragResistance: 0.4,\n    resistance: 400,\n    onDrag: this.updateCenterElem,\n  }\n  \n  if(useInertia) {\n    options.inertia = true;\n    options.onThrowUpdate = this.updateCenterElem;\n    \n    if(useCenterGrid) {\n      options.onThrowComplete = this.centerGrid;\n    }\n  } else if(useCenterGrid) { // No inertia\n    options.onDragEnd = this.centerGrid;\n  }\n      \n  return Draggable.create(containerSelector, options);\n}\n\n  /*moveArrayIndex(array, oldIndex, newIndex) {\n      if (newIndex >= array.length) {\n          newIndex = array.length - 1;\n      }\n      array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n      return array;\n  }\n\n\n  checkPositions(elem) {\n  // Find the location in our array of the element\n    let rowIndex = -1,\n        imgIndex = -1;\n    imgRep.forEach((row, i) => {\n      row.forEach((img, j) => {\n        if(elem.isSameNode(img)) {\n          rowIndex = i;\n          imgIndex = j;\n        }\n      });\n    });\n  \n  // Element not found, return\n    if(rowIndex === -1)\n      return;\n    \n    // Reposition elements as necessary so that our element is in the center\n    // Reposition the rows as necessary\n    if(rowIndex < rowMidIndex) {\n      for(let i = rowIndex; i < rowMidIndex; i++) {\n        // Update the row's actual position\n        let rowY = gsap.getProperty(rowArray[0], \"y\");\n        \n        if(rowArray.length % 2 === 1) { // Odd number of rows means we have to handle offset\n          let row = rowArray[rowArray.length - 1];\n          if(row.dataset.offset === \"true\") {\n            gsap.set(row, {y: rowY - gutter - boxHeight, x: \"+=\" + boxWidth / 2});\n            row.dataset.offset = \"false\";\n          } else {\n            gsap.set(row, {y: rowY - gutter - boxHeight, x: \"-=\" + boxWidth / 2});\n            row.dataset.offset = \"true\";\n          }\n        } else { // Equal number of rows; don't have to handle offset\n          gsap.set(rowArray[rowArray.length - 1], {y: rowY - gutter - boxHeight});\n        }\n        \n        // Update our representations\n        this.moveArrayIndex(imgRep, imgRep.length - 1, 0);\n        this.moveArrayIndex(rowArray, rowArray.length - 1, 0);\n      }\n    } else if(rowIndex > rowMidIndex) {\n      for(let i = rowMidIndex; i < rowIndex; i++) {\n        // Update the row's actual position\n        let rowY = gsap.getProperty(rowArray[rowArray.length - 1], \"y\");\n        \n        if(rowArray.length % 2 === 1) { // Odd number of rows means we have to handle offset\n          let row = rowArray[0];\n          if(row.dataset.offset === \"true\") {\n            gsap.set(row, {y: rowY + gutter + boxHeight, x: \"-=\" + boxWidth / 2});\n            row.dataset.offset = \"false\";\n          } else {\n            gsap.set(row, {y: rowY + gutter + boxHeight, x: \"+=\" + boxWidth / 2});\n            row.dataset.offset = \"true\";\n          }\n        } else { // Equal number of rows; don't have to handle offset\n          gsap.set(rowArray[0], {y: rowY + gutter + boxHeight});\n        }\n        \n        // Update our representations\n        this.moveArrayIndex(imgRep, 0, imgRep.length - 1);\n        this.moveArrayIndex(rowArray, 0, rowArray.length - 1);\n      }\n    }\n  \n  \n    // Reposition the images as necessary\n    if(imgIndex < imgMidIndex) {\n      for(let rowNum = 0; rowNum < rows.length; rowNum++) { // Do it for every row\n        let row = imgRep[rowNum];\n        \n        for(let i = imgIndex; i < imgMidIndex; i++) {\n          // Update the images's actual position\n          let imgX = gsap.getProperty(row[0], \"x\");\n\n          gsap.set(row[row.length - 1], {x: imgX - gutter - boxWidth});\n\n          // Update our representation\n          this.moveArrayIndex(row, row.length - 1, 0);\n        }\n      }\n    } else if(imgIndex > imgMidIndex) {\n      for(let rowNum = 0; rowNum < rows.length; rowNum++) { // Do it for every row\n        let row = imgRep[rowNum];\n        \n        for(let i = imgMidIndex; i < imgIndex; i++) {\n          // Update the images's actual position\n          let imgX = gsap.getProperty(row[imgNum - 1], \"x\");\n\n          gsap.set(row[0], {x: imgX + gutter + boxWidth});\n\n          // Update our representation\n          this.moveArrayIndex(row, 0, row.length - 1);\n        }\n      }\n    }\n  }\n\n\n  centerGrid() {\n    let bcr = lastCenteredElem.getBoundingClientRect();\n    let midX = bcr.x + bcr.width / 2;\n    let midY = bcr.y + bcr.height / 2;\n    \n    let x = winMidX - midX;\n    let y = winMidY - midY;\n    \n    gsap.to(containerSelector, {\n      ease: \"sine.inOut\",\n      duration: 0.7,\n      x: \"+=\" + x,\n      y: \"+=\" + y\n    });\n  }\n\n  updateCenterElem() {\n    let elems = document.elementsFromPoint(winMidX, winMidY);\n    elems.forEach(elem => {\n      if(elem.matches(imageSelector) && !lastCenteredElem.isSameNode(elem)) {\n        lastCenteredElem = elem; \n        \n        this.checkPositions(lastCenteredElem);\n      }\n    });\n  }\n\n  createMask() {\n    let mask = document.createElement(\"div\");\n    mask.className = \"mask\";\n    document.body.appendChild(mask);\n    \n    gsap.set(mask, {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100vw\",\n      height: \"100vh\",\n      zIndex: 9999,\n    });\n  }*/\n\n  /*resize() {\n    winMidX = innerWidth / 2;\n    winMidY = innerHeight / 2;\n    boxWidth = innerWidth * 0.35;\n    boxHeight = innerHeight * 0.35;\n    gutter = innerWidth * 0.05;\n    horizSpacing = boxWidth + gutter;\n    vertSpacing = boxHeight + gutter;\n    horizOffset = -(imgMidIndex * horizSpacing + boxWidth / 2) + winMidX;\n    vertOffset = -(rowMidIndex * vertSpacing + boxHeight / 2) + winMidY;\n    \n    // Reset our container and rows\n    gsap.set(containerSelector, {x: 0, y: 0, rotate: 30});\n    let imgNum = document.querySelectorAll(imageSelector);\n    for (var i = 0; i < imgNum.length; i++) {\n        gsap.set(imgNum[i], {\n          x: function() {\n              return 0;\n          },\n          y: function() {\n            return 0;\n          },\n        });\n    }\n\n    var callback = function (entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          // play the individual target.timeline\n          entry.target.timeline.play();\n        } else {\n          //entry.target.timeline.pause(0);\n        }\n      });\n    };\n\n    var options = {\n      threshold: 0.6, // target 'section' should be 60% visible\n      rootMargin: '0px 0px -40% 0px'\n      //rootMargin isn't active in a normal CodePen.\n      //Change View: use DebugMode\n    };\n\n    var observer = new IntersectionObserver(callback, options);\n    var targets = document.querySelectorAll(imageSelector);\n\n    // a loop: create the individual target timelines\n    targets.forEach(function(target) {\n      var ww = window.innerWidth + 300;\n      var action = gsap.timeline({paused:false})\n      .to(target, {\n        duration: 10, \n        x:ww, \n        ease: \"sine.inOut\", \n        repeat: -1\n      });\n      \n      target.timeline = action;\n    });\n\n    Array.prototype.forEach.call(targets, (el) => {observer.observe(el);});  \n    \n  }\n\n  createDraggable() {\n    let options = {\n      trigger: \".mask\",\n      dragResistance: 0.4,\n      resistance: 400,\n      rotate: 45,\n    }\n    \n    if(useInertia) {\n      options.inertia = true;\n    }\n        \n    return Draggable.create(imageSelector, options);\n  }*/\n\n  mouseMove = e => {\n    TweenLite.to(this.myRef.current, 0.5, {\n      css: {\n        left: e.pageX,\n        top: e.pageY\n      },\n      delay: 0.03\n    });\n  };\n\n  changeBackground(e) {\n    console.log(e.target)\n    e.target.style.background = 'red';\n  }\n\n  handleMouseEnter = () => {\n    TweenLite.to(this.myRef.current, 0, {\n      css: {\n        opacity: \"1\"\n      }\n    });\n  };\n\n  handleMouseLeave = () => {\n    TweenLite.to(this.myRef.current, 0, {\n      css: {\n        opacity: \"0\"\n      }\n    });\n  };\n\n  onHover = e => {\n    if (e.target.className === \"lib__item\") {\n      TweenLite.to(this.myRef.current, 0, {\n        css: { \"background-image\": \"url(\" + image1 + \")\" }\n      });\n    }\n    if (e.target.className === \"project p-2\") {\n      TweenLite.to(this.myRef.current, 0, {\n        css: { \"background-image\": \"url(\" + image2 + \")\" }\n      });\n    }\n    if (e.target.className === \"project p-3\") {\n      TweenLite.to(this.myRef.current, 0, {\n        css: { \"background-image\": \"url(\" + image3 + \")\" }\n      });\n    }\n    if (e.target.className === \"project p-4\") {\n      TweenLite.to(this.myRef.current, 0, {\n        css: { \"background-image\": \"url(\" + image4 + \")\" }\n      });\n    }\n  };\n\n  render() {\n    const dragInfo = {\n      position: 'absolute', \n      bottom: '20%',\n    };\n    return (\n      <React.Fragment>\n        <ul id=\"portfolio-flters\">\n          <li data-filter=\"*\" onClick={() => {this.onFilterChange(\"*\")}}>All</li>\n          <li data-filter=\"filter-one\" onClick={() => {this.onFilterChange(\"filter-one\")}}>One</li>\n          <li data-filter=\"filter-two\" onClick={() => {this.onFilterChange(\"filter-two\")}}>Two</li>\n        </ul>\n        <div className=\"Container__wrapper Container__center\">\n          <div>\n            <div className=\"Intro__wrapper\">\n              <h1 className=\"Heading__wrapper styles__font-size-xl styles__font-family-serif-bold Intro__title\">Nos voyages🏝</h1>\n              <div className=\"Heading__wrapper styles__font-size-sm Intro__desc\">Retrouvez ici toutes les villes que nous avons visité.</div>\n            </div>\n          </div>\n          <div className=\"Container__wrapper Container__absolute Container__center\"></div>\n          <div className=\"Container__wrapper Container__absolute Container__center\">\n              <div className=\"Heading__wrapper styles__font-size-xs\" style={dragInfo}>DRAG POUR EXPLORER</div>\n              <div id=\"imageContainer\" className=\"filter-container\"></div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default projectList;\n"]},"metadata":{},"sourceType":"module"}